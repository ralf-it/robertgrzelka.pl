[{"categories":["Blog","Guides","Advanced"],"content":"Leveraging Azure Service Principal for Efficient Subscription Management Azure, as a cloud service, offers myriad resources and services. As these resources grow in numbers and complexity, efficient and secure management becomes paramount. This is where Azure’s Service Principal, a unique identity created for use with applications, services, and automation tools, comes into play. Through this guide, you’ll gain insights into how Service Principal can be a game-changer for managing access to Azure resources. Why Service Principal? Traditional access control methods, although effective, sometimes don’t scale well with the dynamic and automated environments that modern DevOps teams deal with. Service Principal offers a way to give specific permissions, allowing for a more granular control over resources. This way, permissions can be tailored to match exactly what an application or service needs, ensuring that the principle of least privilege is maintained. ","date":"2023-10-08","objectID":"/blog/azure/azure-access-control-to-resources-with-service-principal/:0:0","tags":["Azure","Azure AD","Azure Active Directory","Azure RBAC","RBAC","Azure Access Control","Azure App Registration","Azure Service Principal","DevOps"],"title":"Azure Access Control to Resources with Service Principal","uri":"/blog/azure/azure-access-control-to-resources-with-service-principal/"},{"categories":["Blog","Guides","Advanced"],"content":"Benefits of Using Service Principal: Automation: Perfect for CI/CD pipelines where manual login might not be feasible. Granular Control: Assign exactly the permissions that an application or service needs. Security: Limited exposure as the permissions are specific, reducing the risk in case of any breach. Setting up Service Principal for Azure Resources ","date":"2023-10-08","objectID":"/blog/azure/azure-access-control-to-resources-with-service-principal/:1:0","tags":["Azure","Azure AD","Azure Active Directory","Azure RBAC","RBAC","Azure Access Control","Azure App Registration","Azure Service Principal","DevOps"],"title":"Azure Access Control to Resources with Service Principal","uri":"/blog/azure/azure-access-control-to-resources-with-service-principal/"},{"categories":["Blog","Guides","Advanced"],"content":"Steps for Setting Access Control: Create an App Registration (Service Principal). Select the desired resource. Assign an RBAC role to the Service Principal for the chosen resource. ","date":"2023-10-08","objectID":"/blog/azure/azure-access-control-to-resources-with-service-principal/:2:0","tags":["Azure","Azure AD","Azure Active Directory","Azure RBAC","RBAC","Azure Access Control","Azure App Registration","Azure Service Principal","DevOps"],"title":"Azure Access Control to Resources with Service Principal","uri":"/blog/azure/azure-access-control-to-resources-with-service-principal/"},{"categories":["Blog","Guides","Advanced"],"content":"Steps for Utilizing the Granted Access Control: Generate an App Registration secret, save it as variable AAD_SECRET. Gather the App Registration’s Client ID (AAD_CLIENT_ID) and Tenant ID (AAD_TENANT_ID). Authenticate to the resource using these credentials via the Azure CLI (AZ CLI). ","date":"2023-10-08","objectID":"/blog/azure/azure-access-control-to-resources-with-service-principal/:3:0","tags":["Azure","Azure AD","Azure Active Directory","Azure RBAC","RBAC","Azure Access Control","Azure App Registration","Azure Service Principal","DevOps"],"title":"Azure Access Control to Resources with Service Principal","uri":"/blog/azure/azure-access-control-to-resources-with-service-principal/"},{"categories":["Blog","Guides","Advanced"],"content":"Using Azure Portal for Service Principal Configuration ","date":"2023-10-08","objectID":"/blog/azure/azure-access-control-to-resources-with-service-principal/:4:0","tags":["Azure","Azure AD","Azure Active Directory","Azure RBAC","RBAC","Azure Access Control","Azure App Registration","Azure Service Principal","DevOps"],"title":"Azure Access Control to Resources with Service Principal","uri":"/blog/azure/azure-access-control-to-resources-with-service-principal/"},{"categories":["Blog","Guides","Advanced"],"content":"1. Delve into Azure Active Directory (AAD) 1.1. Navigate to App Registrations 1.2. Initiate a New Registration 1.3. Retrieve AAD_CLIENT_ID and AAD_TENANT_ID 1.4. Generate and Securely Store the Secret (AAD_SECRET) ","date":"2023-10-08","objectID":"/blog/azure/azure-access-control-to-resources-with-service-principal/:4:1","tags":["Azure","Azure AD","Azure Active Directory","Azure RBAC","RBAC","Azure Access Control","Azure App Registration","Azure Service Principal","DevOps"],"title":"Azure Access Control to Resources with Service Principal","uri":"/blog/azure/azure-access-control-to-resources-with-service-principal/"},{"categories":["Blog","Guides","Advanced"],"content":"2. Head to the Access Control Section of Your Desired Resource 2.1.1. Opt for Subscription - For Inheritable Control NOTE: Choosing this will grant the role over the entire subscription, which is, by default, inherited by all resources within the subscription. 2.1.2. Container Registry - For Singular Resource Control ","date":"2023-10-08","objectID":"/blog/azure/azure-access-control-to-resources-with-service-principal/:4:2","tags":["Azure","Azure AD","Azure Active Directory","Azure RBAC","RBAC","Azure Access Control","Azure App Registration","Azure Service Principal","DevOps"],"title":"Azure Access Control to Resources with Service Principal","uri":"/blog/azure/azure-access-control-to-resources-with-service-principal/"},{"categories":["Blog","Guides","Advanced"],"content":"2.2. Assign the Service Principal as the Owner ","date":"2023-10-08","objectID":"/blog/azure/azure-access-control-to-resources-with-service-principal/:4:3","tags":["Azure","Azure AD","Azure Active Directory","Azure RBAC","RBAC","Azure Access Control","Azure App Registration","Azure Service Principal","DevOps"],"title":"Azure Access Control to Resources with Service Principal","uri":"/blog/azure/azure-access-control-to-resources-with-service-principal/"},{"categories":["Blog","Guides","Advanced"],"content":"3. Authenticate Using Service Principal with AZ CLI After defining permissions and collating all essential credentials, you can then proceed to authenticate your resource using the Azure CLI. 3.1. Installing Azure CLI If the Azure CLI is not yet installed on your system, you can fetch it from Microsoft’s official documentation. 3.2. Service Principal Authentication Execute the command below for authentication: az login --service-principal -u [AAD_CLIENT_ID] -p [AAD_SECRET] --tenant [AAD_TENANT_ID] 3.3. Authentication Verification 3.3.1. Verification for Subscription (from 2.1.1.) To ensure successful authentication, list your account’s subscriptions: az account list --output table A correct setup will display your active subscription(s). 3.3.2. Verification for Container Registry (from 2.1.2.) After granting permissions to the Service Principal for the Azure Container Registry, it’s imperative to verify that the Service Principal can indeed interact with the registry as expected. Here’s how you can confirm this: List Container Registries: Firstly, ensure that you can retrieve the list of container registries under your subscription: az acr list --output table Repository Listing: Once you identify your registry from the list, try listing its repositories. Replace [REGISTRY_NAME] with your container registry’s name: az acr repository list --name [REGISTRY_NAME] --output table Login to Registry: An essential verification step is to confirm that you can log in to the registry using the Service Principal. Remember, this is a crucial capability, especially if you’re planning to push or pull Docker images: az acr login --name [REGISTRY_NAME] If successful, you should see a message indicating a successful login. If there’s an issue, the Azure CLI will return an error, which can help you diagnose any permission or configuration problems. Pull/Push Test (Optional): If you want to be thorough, especially if the Service Principal is meant for CI/CD operations, consider doing a test pull or push of an image. This will confirm that the Service Principal has the necessary permissions for these operations. Remember, while testing, always use non-critical images and repositories to avoid accidental data losses or overwrites. Security Considerations When using Service Principal, there are a few security best practices to keep in mind: Key Rotation: Regularly rotate and renew the secrets and keys. Monitoring: Monitor the access logs to check for any unauthorized access attempts. Limit Permissions: Only grant the permissions that are absolutely necessary. Expiration: Set secrets to expire and renew them periodically to limit the potential damage in case of leaks. Real-world Use Cases: DevOps Pipelines: Automate deployments and manage Azure resources without manual intervention. Third-party Access: Grant third-party applications limited access to specific resources without exposing your entire Azure setup. Scheduled Jobs: For applications that run on schedules and require access to Azure resources. Troubleshooting Tips Setting up Service Principal is generally straightforward, but here are a few common issues: Permission Denied: Ensure that the Service Principal has the required permissions and that there’s no overriding deny assignment. Authentication Failures: Double-check the AAD_SECRET, AAD_CLIENT_ID, and AAD_TENANT_ID. Any mismatch can result in failures. Resource Access Issues: Ensure that the RBAC role assigned to the Service Principal matches the required access level for the resource. Further Reading For those keen on diving deeper into Service Principal and its intricacies, here are a few recommended readings: Azure’s official documentation on Service Principal Best practices for managing and accessing Azure resources Azure CLI documentation for advanced users Wrapping Up Service Principal stands as a testament to Azure’s commitment to providing flexible and secure ways to manage its resources. By integrating it into your workflow, you n","date":"2023-10-08","objectID":"/blog/azure/azure-access-control-to-resources-with-service-principal/:4:4","tags":["Azure","Azure AD","Azure Active Directory","Azure RBAC","RBAC","Azure Access Control","Azure App Registration","Azure Service Principal","DevOps"],"title":"Azure Access Control to Resources with Service Principal","uri":"/blog/azure/azure-access-control-to-resources-with-service-principal/"},{"categories":["Blog","Guides","Advanced"],"content":"Kubernetes Cert Manager with Azure DNS and LetsEncrypt Following my last piece on Azure DNS as external resource for SSL ACME Challenge, today, we are diving deep into securing Kubernetes clusters using the Cert-Manager to generate trusted TLS certificates, particularly for Nginx Ingress, with Azure DNS and Let’s Encrypt. ","date":"2023-10-05","objectID":"/blog/azure/azure-aks-cert-manager-azure-dns-letsencrypt/:0:0","tags":["Azure DNS","DNS","HTTPS","ACME","Let's Encrypt","DevOps","SSL","TLS","Firewall","Kubernetes","Helm Chart","Cert-Manager","Cluster Issuer","Nginx Ingres"],"title":"Azure AKS use Cert Manager to generate TLS Cert with Azure DNS and Letsencrypt","uri":"/blog/azure/azure-aks-cert-manager-azure-dns-letsencrypt/"},{"categories":["Blog","Guides","Advanced"],"content":"Introduction The quest for enhanced security in Kubernetes often leads to the integration of TLS certificates. Leveraging Cert Manager with Azure DNS and Let’s Encrypt simplifies this process, ensuring not only the automation of certificates issuance but also their renewal, enhancing the cluster’s security. ","date":"2023-10-05","objectID":"/blog/azure/azure-aks-cert-manager-azure-dns-letsencrypt/:1:0","tags":["Azure DNS","DNS","HTTPS","ACME","Let's Encrypt","DevOps","SSL","TLS","Firewall","Kubernetes","Helm Chart","Cert-Manager","Cluster Issuer","Nginx Ingres"],"title":"Azure AKS use Cert Manager to generate TLS Cert with Azure DNS and Letsencrypt","uri":"/blog/azure/azure-aks-cert-manager-azure-dns-letsencrypt/"},{"categories":["Blog","Guides","Advanced"],"content":"ACME Challenges Let’s Encrypt employs the ACME protocol to validate domain ownership before issuing certificates. Among the various challenge types, HTTP01 and DNS01 are prominent. ","date":"2023-10-05","objectID":"/blog/azure/azure-aks-cert-manager-azure-dns-letsencrypt/:2:0","tags":["Azure DNS","DNS","HTTPS","ACME","Let's Encrypt","DevOps","SSL","TLS","Firewall","Kubernetes","Helm Chart","Cert-Manager","Cluster Issuer","Nginx Ingres"],"title":"Azure AKS use Cert Manager to generate TLS Cert with Azure DNS and Letsencrypt","uri":"/blog/azure/azure-aks-cert-manager-azure-dns-letsencrypt/"},{"categories":["Blog","Guides","Advanced"],"content":"HTTP01 This challenge requires the applicant to prove the ownership of the domain by providing a special file on an HTTP server at a predefined URL. ","date":"2023-10-05","objectID":"/blog/azure/azure-aks-cert-manager-azure-dns-letsencrypt/:2:1","tags":["Azure DNS","DNS","HTTPS","ACME","Let's Encrypt","DevOps","SSL","TLS","Firewall","Kubernetes","Helm Chart","Cert-Manager","Cluster Issuer","Nginx Ingres"],"title":"Azure AKS use Cert Manager to generate TLS Cert with Azure DNS and Letsencrypt","uri":"/blog/azure/azure-aks-cert-manager-azure-dns-letsencrypt/"},{"categories":["Blog","Guides","Advanced"],"content":"DNS01 In the DNS01 challenge, the domain owner proves their ownership by creating a specific DNS TXT record. This approach is often favored for its ability to bypass the HTTP ingress firewalls. ","date":"2023-10-05","objectID":"/blog/azure/azure-aks-cert-manager-azure-dns-letsencrypt/:2:2","tags":["Azure DNS","DNS","HTTPS","ACME","Let's Encrypt","DevOps","SSL","TLS","Firewall","Kubernetes","Helm Chart","Cert-Manager","Cluster Issuer","Nginx Ingres"],"title":"Azure AKS use Cert Manager to generate TLS Cert with Azure DNS and Letsencrypt","uri":"/blog/azure/azure-aks-cert-manager-azure-dns-letsencrypt/"},{"categories":["Blog","Guides","Advanced"],"content":"Azure DNS Zone for DNS01 Challenge Azure DNS facilitates the hosting of your DNS domain and the management of your domain records. Integrating this with Cert Manager enables automated DNS01 challenges completion. ","date":"2023-10-05","objectID":"/blog/azure/azure-aks-cert-manager-azure-dns-letsencrypt/:2:3","tags":["Azure DNS","DNS","HTTPS","ACME","Let's Encrypt","DevOps","SSL","TLS","Firewall","Kubernetes","Helm Chart","Cert-Manager","Cluster Issuer","Nginx Ingres"],"title":"Azure AKS use Cert Manager to generate TLS Cert with Azure DNS and Letsencrypt","uri":"/blog/azure/azure-aks-cert-manager-azure-dns-letsencrypt/"},{"categories":["Blog","Guides","Advanced"],"content":"Code Blueprints ","date":"2023-10-05","objectID":"/blog/azure/azure-aks-cert-manager-azure-dns-letsencrypt/:3:0","tags":["Azure DNS","DNS","HTTPS","ACME","Let's Encrypt","DevOps","SSL","TLS","Firewall","Kubernetes","Helm Chart","Cert-Manager","Cluster Issuer","Nginx Ingres"],"title":"Azure AKS use Cert Manager to generate TLS Cert with Azure DNS and Letsencrypt","uri":"/blog/azure/azure-aks-cert-manager-azure-dns-letsencrypt/"},{"categories":["Blog","Guides","Advanced"],"content":"Cert Manager via Helm Chart The Helm charts below define the deployment of Cert Manager in the Kubernetes cluster, ensuring the CRDs installation and setting the DNS policy for the pods. Helm cert-manager/Chart.yaml apiVersion: v2 name: cert-manager version: 1.11.0 appVersion: 1.11.0 dependencies: - name: cert-manager version: 1.11.0 repository: https://charts.jetstack.io Helm cert-manager/values.yaml cert-manager: installCRDs: true podDnsPolicy: \"None\" podDnsConfig: nameservers: - \"8.8.8.8\" ","date":"2023-10-05","objectID":"/blog/azure/azure-aks-cert-manager-azure-dns-letsencrypt/:3:1","tags":["Azure DNS","DNS","HTTPS","ACME","Let's Encrypt","DevOps","SSL","TLS","Firewall","Kubernetes","Helm Chart","Cert-Manager","Cluster Issuer","Nginx Ingres"],"title":"Azure AKS use Cert Manager to generate TLS Cert with Azure DNS and Letsencrypt","uri":"/blog/azure/azure-aks-cert-manager-azure-dns-letsencrypt/"},{"categories":["Blog","Guides","Advanced"],"content":"Cert Manager Certs via Helm Chart The configuration below defines a Kubernetes secret to store Azure DNS credentials and a ClusterIssuer for Let’s Encrypt ACME DNS01 challenge using Azure DNS. Helm cert-manager-certs/template/cluster-issuer.yaml apiVersion: v1 kind: Secret metadata: name: cert-manager-azure-dns type: Opaque stringData: SP_CLIENT_SECRET: {{ .Values.azureDNS.SP_CLIENT_SECRET }} --- apiVersion: cert-manager.io/v1 kind: ClusterIssuer metadata: name: azuredns-letsencrypt spec: acme: server: https://acme-v02.api.letsencrypt.org/directory email: {{ .Values.email }} privateKeySecretRef: name: azuredns-letsencrypt solvers: - dns01: cnameStrategy: Follow azureDNS: environment: AzurePublicCloud hostedZoneName: {{ .Values.azureDNS.AZURE_ZONE_NAME }} subscriptionID: {{ .Values.azureDNS.AZURE_SUBSCRIPTION_ID }} resourceGroupName: {{ .Values.azureDNS.AZURE_RESOURCE_GROUP }} tenantID: {{ .Values.azureDNS.SP_TENANT_ID }} clientID: {{ .Values.azureDNS.SP_CLIENT_ID }} clientSecretSecretRef: name: cert-manager-azure-dns key: SP_CLIENT_SECRET ","date":"2023-10-05","objectID":"/blog/azure/azure-aks-cert-manager-azure-dns-letsencrypt/:3:2","tags":["Azure DNS","DNS","HTTPS","ACME","Let's Encrypt","DevOps","SSL","TLS","Firewall","Kubernetes","Helm Chart","Cert-Manager","Cluster Issuer","Nginx Ingres"],"title":"Azure AKS use Cert Manager to generate TLS Cert with Azure DNS and Letsencrypt","uri":"/blog/azure/azure-aks-cert-manager-azure-dns-letsencrypt/"},{"categories":["Blog","Guides","Advanced"],"content":"Nginx Ingress via Helm Chart This section illustrates how to use the ClusterIssuer to generate a TLS certificate through annotations in the values for the nginx ingress of a service. Helm /values.yaml ingress: enabled: true pathType: ImplementationSpecific ingressClassName: \"nginx-ingress\" hosts: - name: example.com path: \"/\" hostname: example.com tls: - secretName: example.com-tls hosts: - example.com annotations: kubernetes.io/tls-acme: \"true\" ingress.kubernetes.io/ssl-redirect: \"true\" cert-manager.io/cluster-issuer: \"azuredns-letsencrypt\" ","date":"2023-10-05","objectID":"/blog/azure/azure-aks-cert-manager-azure-dns-letsencrypt/:3:3","tags":["Azure DNS","DNS","HTTPS","ACME","Let's Encrypt","DevOps","SSL","TLS","Firewall","Kubernetes","Helm Chart","Cert-Manager","Cluster Issuer","Nginx Ingres"],"title":"Azure AKS use Cert Manager to generate TLS Cert with Azure DNS and Letsencrypt","uri":"/blog/azure/azure-aks-cert-manager-azure-dns-letsencrypt/"},{"categories":["Blog","Guides","Advanced"],"content":"Bringing It All Together With the integration of Azure DNS, Cert Manager, and Let’s Encrypt, Kubernetes clusters can now seamlessly generate and manage TLS certificates. This not only bolsters the security posture but also automates the renewal process, ensuring uninterrupted secure services. ","date":"2023-10-05","objectID":"/blog/azure/azure-aks-cert-manager-azure-dns-letsencrypt/:4:0","tags":["Azure DNS","DNS","HTTPS","ACME","Let's Encrypt","DevOps","SSL","TLS","Firewall","Kubernetes","Helm Chart","Cert-Manager","Cluster Issuer","Nginx Ingres"],"title":"Azure AKS use Cert Manager to generate TLS Cert with Azure DNS and Letsencrypt","uri":"/blog/azure/azure-aks-cert-manager-azure-dns-letsencrypt/"},{"categories":["Blog","Guides","Advanced"],"content":"Debugging and Validation Ensure to monitor the certificate issuance process by checking the Certificate, CertificateRequest, and Order objects. Validate that the certificates are correctly configured and downloaded to your cluster. ","date":"2023-10-05","objectID":"/blog/azure/azure-aks-cert-manager-azure-dns-letsencrypt/:4:1","tags":["Azure DNS","DNS","HTTPS","ACME","Let's Encrypt","DevOps","SSL","TLS","Firewall","Kubernetes","Helm Chart","Cert-Manager","Cluster Issuer","Nginx Ingres"],"title":"Azure AKS use Cert Manager to generate TLS Cert with Azure DNS and Letsencrypt","uri":"/blog/azure/azure-aks-cert-manager-azure-dns-letsencrypt/"},{"categories":["Blog","Guides","Advanced"],"content":"Final Thoughts The amalgamation of Azure DNS with Kubernetes Cert Manager and Let’s Encrypt offers an efficient, automated, and secure method to manage TLS certificates. Always ensure to redirect all traffic to your AKS cluster post the successful setup. Stay tuned for more insights, and feel free to reach out for any queries or discussions! Stay Secure, Stay Automated! ","date":"2023-10-05","objectID":"/blog/azure/azure-aks-cert-manager-azure-dns-letsencrypt/:4:2","tags":["Azure DNS","DNS","HTTPS","ACME","Let's Encrypt","DevOps","SSL","TLS","Firewall","Kubernetes","Helm Chart","Cert-Manager","Cluster Issuer","Nginx Ingres"],"title":"Azure AKS use Cert Manager to generate TLS Cert with Azure DNS and Letsencrypt","uri":"/blog/azure/azure-aks-cert-manager-azure-dns-letsencrypt/"},{"categories":["Blog","Guides"],"content":"Securing Web Services with Azure DNS: Mastering the SSL ACME Challenge Secure web services are non-negotiable, and SSL/TLS certificates stand at the forefront of this security. While Let’s Encrypt offers these certificates, procuring them becomes a complex task if your server is shielded by a firewall that filters out incoming internet traffic. The culprit? Let’s Encrypt’s ACME challenge requests. Thankfully, Azure DNS comes to the rescue, providing a smooth path to your solution. ","date":"2023-10-04","objectID":"/blog/azure/azure-dns-for-letsencrypt-acme-challenge/:1:0","tags":["Azure DNS","DNS","ACME","ACME Challenge","Let's Encrypt","DevOps","Certificate","SSL","TLS","Firewall"],"title":"Azure DNS as external resource for SSL ACME Challenge to bypass Ingress Firewalls","uri":"/blog/azure/azure-dns-for-letsencrypt-acme-challenge/"},{"categories":["Blog","Guides"],"content":"The Power of Azure DNS Azure DNS isn’t just another tool in your arsenal; it’s a game-changer when you’re looking to obtain SSL/TLS certificates in environments riddled with restrictions. Our guide offers a comprehensive walkthrough, equipped with necessary scripts and configurations, ensuring you overcome these challenges effortlessly. ","date":"2023-10-04","objectID":"/blog/azure/azure-dns-for-letsencrypt-acme-challenge/:1:1","tags":["Azure DNS","DNS","ACME","ACME Challenge","Let's Encrypt","DevOps","Certificate","SSL","TLS","Firewall"],"title":"Azure DNS as external resource for SSL ACME Challenge to bypass Ingress Firewalls","uri":"/blog/azure/azure-dns-for-letsencrypt-acme-challenge/"},{"categories":["Blog","Guides"],"content":"A Peek into the Solution Understanding the underlying mechanism enhances implementation. Here’s a schematic representation of our strategy: C S a A l e d z D i r d u N e v r S n e T e t r X T r e c ( o c r A h d C e M c r ( F E k e t i q r r C T u i e h X e g w a T s g a l t e l l r r l e e c n c e c g o r h e r t a d i l ) f l i e c n a g t e e ) L e t ' s E n c r y p t [ g o a t ] ","date":"2023-10-04","objectID":"/blog/azure/azure-dns-for-letsencrypt-acme-challenge/:1:2","tags":["Azure DNS","DNS","ACME","ACME Challenge","Let's Encrypt","DevOps","Certificate","SSL","TLS","Firewall"],"title":"Azure DNS as external resource for SSL ACME Challenge to bypass Ingress Firewalls","uri":"/blog/azure/azure-dns-for-letsencrypt-acme-challenge/"},{"categories":["Blog","Guides"],"content":"Implementing the Solution To implement this solution, you’ll need two main scripts: one for setting up Azure DNS with the ACME challenge and another for configuring the SSL certificate with Terraform. 0. Prerequisites Tools: Azure CLI (az) acme.sh CLI (acme.sh) Azure resources: existing Azure Subscription -\u003e AZUREDNS_SUBSCRIPTIONID existing Azure App Registration -\u003e AZUREDNS_APPID existing Azure DNS -\u003e AZDNS_ZONE 1. Azure DNS with ACME Challenge Blueprint NOTE: Code was cleaned up from anything beside critical parts: Azure RBAC acme.sh using Azure DNS # Assign \"DNS Zone Contributor\" role in Azure az role assignment create \\ --role \"DNS Zone Contributor\" \\ --assignee \"$AZUREDNS_APPID\" \\ --scope \"/subscriptions/$AZUREDNS_SUBSCRIPTIONID\" # ... # Issue certificate via acme.sh using Azure DNS acme.sh \\ --issue \\ --dns dns_azure \\ -d \"$AZDNS_ZONE\" ","date":"2023-10-04","objectID":"/blog/azure/azure-dns-for-letsencrypt-acme-challenge/:1:3","tags":["Azure DNS","DNS","ACME","ACME Challenge","Let's Encrypt","DevOps","Certificate","SSL","TLS","Firewall"],"title":"Azure DNS as external resource for SSL ACME Challenge to bypass Ingress Firewalls","uri":"/blog/azure/azure-dns-for-letsencrypt-acme-challenge/"},{"categories":["Blog","Guides"],"content":"Concluding Notes Azure DNS is your ally when conventional methods fall short. By integrating it, you not only ensure robust security with SSL/TLS certificates, even behind the most stringent firewalls, but also embrace an efficient and streamlined process. Stay updated, stay secure! ","date":"2023-10-04","objectID":"/blog/azure/azure-dns-for-letsencrypt-acme-challenge/:1:4","tags":["Azure DNS","DNS","ACME","ACME Challenge","Let's Encrypt","DevOps","Certificate","SSL","TLS","Firewall"],"title":"Azure DNS as external resource for SSL ACME Challenge to bypass Ingress Firewalls","uri":"/blog/azure/azure-dns-for-letsencrypt-acme-challenge/"},{"categories":["Blog","Guides"],"content":"Azure DevOps: Understanding Compile-time, Queue-time, and Run-time Variables Azure DevOps stands as a formidable platform for continuous integration and continuous delivery (CI/CD). Its power is enriched by its versatile variable management system. This article will guide you through the maze of Azure DevOps variables, revealing the hidden quirks and behaviors across different scopes. ","date":"2023-10-03","objectID":"/blog/azure/azure-devops-variables/:0:0","tags":["Azure","Azure DevOps","CI/CD","Pipelines","DevOps","Variables","Compile-time","Queue-time","Runtime"],"title":"Azure DevOps Pipeline Variable Types - Compile-time, Queue-time, and Run-time","uri":"/blog/azure/azure-devops-variables/"},{"categories":["Blog","Guides"],"content":"Usecases This Post Will Answer: Ever been puzzled about how Azure DevOps Pipelines handle variables? Wondering how to leverage your pipeline with variable scopes? How can I trigger my pipeline template in for loop for each of targets from list? How do I disable certain targets from the Azure DevOps UI? Is it possible to use variable groups, or other centralised means, for rendering templates? How to mix compile-time, queue-time, and run-time variables and/or parameters? ","date":"2023-10-03","objectID":"/blog/azure/azure-devops-variables/:1:0","tags":["Azure","Azure DevOps","CI/CD","Pipelines","DevOps","Variables","Compile-time","Queue-time","Runtime"],"title":"Azure DevOps Pipeline Variable Types - Compile-time, Queue-time, and Run-time","uri":"/blog/azure/azure-devops-variables/"},{"categories":["Blog","Guides"],"content":"Understanding Variable Types Azure DevOps categorizes variables into three principal types: Compile-time Variables: Think of these as the constants in your code. Evaluated at pipeline compilation, they remain unaltered during the pipeline’s lifespan. Queue-time Variables: Set when the pipeline is queued and predominantly seen in the Azure DevOps UI. They come to the rescue when you need to override or supply values post compilation. Run-time Variables: The chameleons of the lot, they’re dynamic and spring to life during the pipeline’s execution. ","date":"2023-10-03","objectID":"/blog/azure/azure-devops-variables/:2:0","tags":["Azure","Azure DevOps","CI/CD","Pipelines","DevOps","Variables","Compile-time","Queue-time","Runtime"],"title":"Azure DevOps Pipeline Variable Types - Compile-time, Queue-time, and Run-time","uri":"/blog/azure/azure-devops-variables/"},{"categories":["Blog","Guides"],"content":"Code Snippets, Best Practices \u0026 Insights Coupling insights from provided code snippets and Azure DevOps’ documentation, let’s decode the art of using variables: ","date":"2023-10-03","objectID":"/blog/azure/azure-devops-variables/:3:0","tags":["Azure","Azure DevOps","CI/CD","Pipelines","DevOps","Variables","Compile-time","Queue-time","Runtime"],"title":"Azure DevOps Pipeline Variable Types - Compile-time, Queue-time, and Run-time","uri":"/blog/azure/azure-devops-variables/"},{"categories":["Blog","Guides"],"content":"1. Templates and Compile-time Templates thrive on compile-time parameters and static variables. Beware: passing dynamic run-time or UI-driven queue-time variables as compile-time parameters to nested templates is a no-go. variables: - name: variableHardcoded value: compileTime 1.1. Sourcing Files from other repos External files in Azure DevOps are your compile-time companions. Ideal for shared configurations or templates from single centralized place. resources: repositories: - repository: templates type: git name: 'MyProject/infrastructure-azure' ref: refs/heads/dev variables: - template: azure-pipelines/templates/vars.yml@templates # ! load at compile time where azure-pipelines/templates/vars.yml variables: - name: targetsDelimiter value: ';' - name: targetsList value: westeurope;southuk ## helper variables - name: targetsListUpper value: ${{ upper(variables.targetsList) }} - name: targetsListLower value: ${{ lower(variables.targetsList) }} ","date":"2023-10-03","objectID":"/blog/azure/azure-devops-variables/:3:1","tags":["Azure","Azure DevOps","CI/CD","Pipelines","DevOps","Variables","Compile-time","Queue-time","Runtime"],"title":"Azure DevOps Pipeline Variable Types - Compile-time, Queue-time, and Run-time","uri":"/blog/azure/azure-devops-variables/"},{"categories":["Blog","Guides"],"content":"2. Mixing Variable Types For conditions to work their magic, they need either queue-time or run-time variables. Using compile-time variables in conditions? Ensure they’re declared as variables upfront. stages: - template: templates/build-stage.yml - ${{ each target in split(variables.targetsList, variables.targetsListDelimiter) }}: - template: templates/deploy-stage.yml parameters: target: ${{ target }} 2.1. Conditions where file: templates/deploy-stage.yml parameters: - name: target displayName: AZURE TARGET REGION type: string default: '' stages: - stage: ShowVars${{ upper(parameters.target) }} dependsOn: variables: - name: target value: ${{ parameters.target }} condition: not(contains(variables.targetListDisabled, variables.target)) ","date":"2023-10-03","objectID":"/blog/azure/azure-devops-variables/:3:2","tags":["Azure","Azure DevOps","CI/CD","Pipelines","DevOps","Variables","Compile-time","Queue-time","Runtime"],"title":"Azure DevOps Pipeline Variable Types - Compile-time, Queue-time, and Run-time","uri":"/blog/azure/azure-devops-variables/"},{"categories":["Blog","Guides"],"content":"3. Azure DevOps Library Group Variables These are your run-time variable superstars. They dynamically enter the scene during the pipeline’s runtime. variables: - group: infrastructure_dev ","date":"2023-10-03","objectID":"/blog/azure/azure-devops-variables/:3:3","tags":["Azure","Azure DevOps","CI/CD","Pipelines","DevOps","Variables","Compile-time","Queue-time","Runtime"],"title":"Azure DevOps Pipeline Variable Types - Compile-time, Queue-time, and Run-time","uri":"/blog/azure/azure-devops-variables/"},{"categories":["Blog","Guides"],"content":"4. Least precedence of UI variables Variables in Azure DevOps UI are your queue-time warriors. However, any YAML or template-set variable can usurp the UI set variable. This safety net ensures accidental UI overrides don’t wreak havoc. Rule of thumb: Set them in one place for clarity. # - name: targetsListDisabled # ! has to be set in Azure DevOps Pipeline UI as yml take precedence ","date":"2023-10-03","objectID":"/blog/azure/azure-devops-variables/:3:4","tags":["Azure","Azure DevOps","CI/CD","Pipelines","DevOps","Variables","Compile-time","Queue-time","Runtime"],"title":"Azure DevOps Pipeline Variable Types - Compile-time, Queue-time, and Run-time","uri":"/blog/azure/azure-devops-variables/"},{"categories":["Blog","Guides"],"content":"Wrapping Up In the realm of Azure DevOps, mastering variables is akin to holding the keys to a treasure trove. By discerning between compile-time, queue-time, and run-time variables, you pave the way for streamlined and potent pipelines. As you journey forth, remember to always be mindful of your variable settings to guarantee a seamless CI/CD process. ","date":"2023-10-03","objectID":"/blog/azure/azure-devops-variables/:4:0","tags":["Azure","Azure DevOps","CI/CD","Pipelines","DevOps","Variables","Compile-time","Queue-time","Runtime"],"title":"Azure DevOps Pipeline Variable Types - Compile-time, Queue-time, and Run-time","uri":"/blog/azure/azure-devops-variables/"},{"categories":["Blog","Guides","Basics"],"content":"In my another article we described a Private Endpoints for VNET Integrated Ingress. Today we will talk about Public Network Firewall Access Control from VNET Subnets and IP Addresses. In today’s digital age, within the vast ecosystem of Azure, security stands out as one of the most pressing concerns for developers and system administrators alike. As organizations increasingly migrate their assets to the cloud, ensuring their protection becomes an absolute necessity. A critical component of this protective infrastructure is the Azure Key Vault. So, how can we guarantee that only the right entities can access it? ","date":"2023-10-02","objectID":"/blog/azure/azure-public-network-firewall-access-control/:0:0","tags":["Azure","VNET","Subnet","IP Address","Public Network Access","Firewall","DevOps","Key Vault"],"title":"Azure Public Network Firewall Access Control from VNET Subnets and IP Addresses","uri":"/blog/azure/azure-public-network-firewall-access-control/"},{"categories":["Blog","Guides","Basics"],"content":"Allow public network access from all networks By default, Azure Key Vault is designed to be accessible over a public network. In simpler terms, anyone armed with the correct credentials can reach it, regardless of their location. While this offers a high degree of convenience, it may not always be the safest route. ","date":"2023-10-02","objectID":"/blog/azure/azure-public-network-firewall-access-control/:1:0","tags":["Azure","VNET","Subnet","IP Address","Public Network Access","Firewall","DevOps","Key Vault"],"title":"Azure Public Network Firewall Access Control from VNET Subnets and IP Addresses","uri":"/blog/azure/azure-public-network-firewall-access-control/"},{"categories":["Blog","Guides","Basics"],"content":"Disable public network access On the flip side, turning off public network access implies that only those resources which are part of the same VNET (via Private Endpoint described here), and optionally, certain “trusted” Microsoft services, can bypass the firewall to connect with the Key Vault. This option is inherently more secure, but might not be universally applicable ie. during development, resource troubleshooting, etc. ","date":"2023-10-02","objectID":"/blog/azure/azure-public-network-firewall-access-control/:2:0","tags":["Azure","VNET","Subnet","IP Address","Public Network Access","Firewall","DevOps","Key Vault"],"title":"Azure Public Network Firewall Access Control from VNET Subnets and IP Addresses","uri":"/blog/azure/azure-public-network-firewall-access-control/"},{"categories":["Blog","Guides","Basics"],"content":"Control public network access In this post, we’ll delve deep into the mechanisms Azure offers to manage access to the Key Vault over a public network, using firewall rules based on VNET Subnets and specific IP addresses. ","date":"2023-10-02","objectID":"/blog/azure/azure-public-network-firewall-access-control/:3:0","tags":["Azure","VNET","Subnet","IP Address","Public Network Access","Firewall","DevOps","Key Vault"],"title":"Azure Public Network Firewall Access Control from VNET Subnets and IP Addresses","uri":"/blog/azure/azure-public-network-firewall-access-control/"},{"categories":["Blog","Guides","Basics"],"content":"Why Control Access? Before diving into the specifics, it’s pivotal to grasp the underlying reasons for these controls on example of Key Vault. Azure Key Vault serves as a secure cloud sanctuary for secrets, keys, and certificates. Any breach or unauthorized access to this vault can jeopardize countless services and data. By narrowing down access to designated VNET subnets or IP addresses, we can drastically shrink the potential threat landscape. ","date":"2023-10-02","objectID":"/blog/azure/azure-public-network-firewall-access-control/:3:1","tags":["Azure","VNET","Subnet","IP Address","Public Network Access","Firewall","DevOps","Key Vault"],"title":"Azure Public Network Firewall Access Control from VNET Subnets and IP Addresses","uri":"/blog/azure/azure-public-network-firewall-access-control/"},{"categories":["Blog","Guides","Basics"],"content":"Access Control using VNET Subnets Azure VNET (Virtual Network) provides a secure corridor for Azure resources to interact with each other. Within this VNET, we can carve out a specific subnet and then stipulate that only this designated subnet has the keys to our Key Vault. This ensures an additional security layer, where any resource outside this subnet faces a locked door. ","date":"2023-10-02","objectID":"/blog/azure/azure-public-network-firewall-access-control/:3:2","tags":["Azure","VNET","Subnet","IP Address","Public Network Access","Firewall","DevOps","Key Vault"],"title":"Azure Public Network Firewall Access Control from VNET Subnets and IP Addresses","uri":"/blog/azure/azure-public-network-firewall-access-control/"},{"categories":["Blog","Guides","Basics"],"content":"Access Control using IP Addresses For situations where resources are located outside of Azure, like a local data center or even another cloud service, and need to tap into the Key Vault, IP-based rules are the way to go. By whitelisting specific IP addresses, we can rest assured that only familiar and trusted entities can access the treasure trove of secrets in the Key Vault. ","date":"2023-10-02","objectID":"/blog/azure/azure-public-network-firewall-access-control/:3:3","tags":["Azure","VNET","Subnet","IP Address","Public Network Access","Firewall","DevOps","Key Vault"],"title":"Azure Public Network Firewall Access Control from VNET Subnets and IP Addresses","uri":"/blog/azure/azure-public-network-firewall-access-control/"},{"categories":["Blog","Guides","Basics"],"content":"Exceptions Even with these stringent controls, there are certain exceptions that can be made to be aware of, primarily regarding Microsoft trusted services. Trusted services REF: Virtual network service endpoints for Azure Key Vault NOTE: The trusted services list encompasses services where Microsoft controls all of the code that runs on the service. Since users can write custom code in Azure services such as Azure DevOps, Microsoft does not provide the option to create a blanket approval for the service. Here’s a list of trusted services that are allowed to access a key vault if the Allow trusted services option is enabled. Trusted service Supported usage scenarios Azure API Management Deploy certificates for Custom Domain from Key Vault using MSI Azure App Service App Service is trusted only for Deploying Azure Web App Certificate through Key Vault, for individual app itself, the outbound IPs can be added in Key Vault’s IP-based rules Azure Application Gateway Using Key Vault certificates for HTTPS-enabled listeners Azure Backup Allow backup and restore of relevant keys and secrets during Azure Virtual Machines backup, by using Azure Backup. Azure Batch Configure customer-managed keys for Batch accounts and Key Vault for User Subscription Batch accounts Azure Bot Service Azure AI Bot Service encryption for data at rest Azure CDN Configure HTTPS on an Azure CDN custom domain: Grant Azure CDN access to your key vault Azure Container Registry Registry encryption using customer-managed keys Azure Data Factory Fetch data store credentials in Key Vault from Data Factory Azure Data Lake Store Encryption of data in Azure Data Lake Store with a customer-managed key. Azure Database for MySQL Data encryption for Azure Database for MySQL Azure Database for PostgreSQL Single server Data encryption for Azure Database for PostgreSQL Single server Azure Database for PostgreSQL Flexible server Data encryption for Azure Database for PostgreSQL Flexible server Azure Databricks Fast, easy, and collaborative Apache Spark–based analytics service Azure Disk Encryption volume encryption service Allow access to BitLocker Key (Windows VM) or DM Passphrase (Linux VM), and Key Encryption Key, during virtual machine deployment. This enables Azure Disk Encryption. Azure Disk Storage When configured with a Disk Encryption Set (DES). For more information, see Server-side encryption of Azure Disk Storage using customer-managed keys. Azure Event Hubs Allow access to a key vault for customer-managed keys scenario Azure Firewall Premium Azure Firewall Premium certificates Azure Front Door Classic Using Key Vault certificates for HTTPS Azure Front Door Standard/Premium Using Key Vault certificates for HTTPS Azure Import/Export Use customer-managed keys in Azure Key Vault for Import/Export service Azure Information Protection Allow access to tenant key for Azure Information Protection. Azure Machine Learning Secure Azure Machine Learning in a virtual network Azure Resource Manager template deployment service Pass secure values during deployment. Azure Service Bus Allow access to a key vault for customer-managed keys scenario Azure SQL Database Transparent Data Encryption with Bring Your Own Key support for Azure SQL Database and Azure Synapse Analytics. Azure Storage Storage Service Encryption using customer-managed keys in Azure Key Vault. Azure Synapse Analytics Encryption of data using customer-managed keys in Azure Key Vault Azure Virtual Machines deployment service Deploy certificates to VMs from customer-managed Key Vault. Exchange Online, SharePoint Online, M365DataAtRestEncryption Allow access to customer managed keys for Data-At-Rest Encryption with Customer Key. Microsoft Purview Using credentials for source authentication in Microsoft Purview ","date":"2023-10-02","objectID":"/blog/azure/azure-public-network-firewall-access-control/:3:4","tags":["Azure","VNET","Subnet","IP Address","Public Network Access","Firewall","DevOps","Key Vault"],"title":"Azure Public Network Firewall Access Control from VNET Subnets and IP Addresses","uri":"/blog/azure/azure-public-network-firewall-access-control/"},{"categories":["Blog","Guides","Basics"],"content":"The Bigger Picture By intertwining VNET Subnet and IP Address-based rules, Azure furnishes a formidable mechanism to shield your Key Vaults. It not only meshes effortlessly with other Azure offerings but also bestows granular control, addressing both broad and niche requirements. ","date":"2023-10-02","objectID":"/blog/azure/azure-public-network-firewall-access-control/:4:0","tags":["Azure","VNET","Subnet","IP Address","Public Network Access","Firewall","DevOps","Key Vault"],"title":"Azure Public Network Firewall Access Control from VNET Subnets and IP Addresses","uri":"/blog/azure/azure-public-network-firewall-access-control/"},{"categories":["Blog","Guides","Basics"],"content":"Code Sample: Configuring Azure Key Vault Network Access When working with Azure infrastructure, Infrastructure as Code (IaC) often becomes the preferred approach, allowing for the reliable and repeatable deployment of resources. Using Terraform, one of the popular IaC tools, we can define and provision our Azure Key Vault along with its network access controls. Below is a Terraform code snippet that showcases how to set up an Azure Key Vault with specific network access controls: ## Create Azure Key Vault with specified configuration. ## resource \"azurerm_key_vault\" \"this\" { ## The final name is constructed using a prefix, 'kv', and a suffix. ## name = \"${var.prefix}kv${var.suffix}\" ## The Azure region where the Key Vault will be created. ## location = var.location ## The Azure Resource Group under which the Key Vault will reside. ## resource_group_name = var.resource_group_name ## The Azure Active Directory Tenant ID that will be associated with this Key Vault. ## tenant_id = var.tenant_id ## The SKU (pricing tier) for the Key Vault. In this case, it's set to \"standard\". ## sku_name = \"standard\" ## Network Access Control Lists (ACLs) define who can access the Key Vault. ## network_acls { ## By default, all requests are denied. ## default_action = \"Deny\" ## However, Trusted Microsoft services are allowed to bypass this default rule. ## bypass = \"AzureServices\" ## Only the specified virtual network's subnet can access this Key Vault. ## virtual_network_subnet_ids = [azurerm_subnet.this.id] ## Apart from the subnet, only the specified IP addresses can access the Key Vault. ## ip_rules = var.ip_list } } ","date":"2023-10-02","objectID":"/blog/azure/azure-public-network-firewall-access-control/:5:0","tags":["Azure","VNET","Subnet","IP Address","Public Network Access","Firewall","DevOps","Key Vault"],"title":"Azure Public Network Firewall Access Control from VNET Subnets and IP Addresses","uri":"/blog/azure/azure-public-network-firewall-access-control/"},{"categories":["Blog","Guides","Basics"],"content":"Conclusion Security in the cloud is a shared responsibility. While Azure provides the tools and services, it’s up to us to utilize them effectively. By understanding and implementing access control on our Key Vaults, we’re not just securing our data, but we’re also ensuring the smooth operation of our services by preventing any unauthorized or malicious access. ","date":"2023-10-02","objectID":"/blog/azure/azure-public-network-firewall-access-control/:6:0","tags":["Azure","VNET","Subnet","IP Address","Public Network Access","Firewall","DevOps","Key Vault"],"title":"Azure Public Network Firewall Access Control from VNET Subnets and IP Addresses","uri":"/blog/azure/azure-public-network-firewall-access-control/"},{"categories":["Blog","Guides","Basics"],"content":"References Configure Azure Key Vault firewalls and virtual networks - Azure Key Vault ","date":"2023-10-02","objectID":"/blog/azure/azure-public-network-firewall-access-control/:7:0","tags":["Azure","VNET","Subnet","IP Address","Public Network Access","Firewall","DevOps","Key Vault"],"title":"Azure Public Network Firewall Access Control from VNET Subnets and IP Addresses","uri":"/blog/azure/azure-public-network-firewall-access-control/"},{"categories":["Blog","Guides","Basics"],"content":"In my another article we described a Public Network Firewall Access Control. Today we will talk about Private Endpoints for VNET Integrated Ingress. Networking is a crucial component of any cloud infrastructure. With Azure, you can design intricate network topologies that cater to various security, isolation, and connectivity needs. Today, we’re going to delve into Inbound Private Networking in Azure, focusing on Azure Private Endpoints and how they facilitate secure inbound connectivity. ","date":"2023-10-01","objectID":"/blog/azure/azure-private-endpoint/:0:0","tags":["Azure DNS","DNS","Private Endpoint","VNet","Virtual Network","Private Link","Private DNS Zone","Terraform","App Service"],"title":"Azure Private Endpoints for VNET Integrated Ingress","uri":"/blog/azure/azure-private-endpoint/"},{"categories":["Blog","Guides","Basics"],"content":"What is Azure Private Endpoint? Azure Private Endpoint is a network interface that connects you privately and securely to a service powered by Azure Private Link. The service could be an Azure service like Azure Storage, Azure Cosmos DB, SQL, Container Registry, etc., or your own Private Link Service. The connection via private endpoint uses a private IP address from your VNet, effectively bringing the service into your VNet. ","date":"2023-10-01","objectID":"/blog/azure/azure-private-endpoint/:1:0","tags":["Azure DNS","DNS","Private Endpoint","VNet","Virtual Network","Private Link","Private DNS Zone","Terraform","App Service"],"title":"Azure Private Endpoints for VNET Integrated Ingress","uri":"/blog/azure/azure-private-endpoint/"},{"categories":["Blog","Guides","Basics"],"content":"Understanding the Diagram First let’s briefly introduce involved Azure resources, then we will use a diagram to understand how various components like Azure Container Registry, Azure App Service, VNet, and Private DNS Zones interact within VNET. Diagram Resources Resource Group A: Container Registry Private DNS Zone: privatelink.azurecr.cn Private Link Resource Group B: VNet App Service Private Endpoint Resources Definitions Container Registry: A managed Docker container registry that allows you to store and manage container images and artifacts in a secure, scalable, and efficient way. With Private Endpoints, you can securely pull images from this registry using a private IP. Private DNS Zone: Azure’s DNS service that allows you to use your own custom domain names rather than the Azure-provided names. In our setup, it facilitates the resolution of domain names in a VNet without the need to configure a custom DNS solution. Private Link: Azure Private Link service is a way to expose your application on a private IP address in a VNet, thus isolating it from the public internet. It ensures that data transits solely over the Microsoft backbone, removing any exposure to the public internet. VNet (Virtual Network): It acts as an isolated, highly-secure environment in Azure that allows Azure resources to securely communicate with each other, the internet, and on-premises networks. It is the backbone of Azure networking. App Service: A fully-managed platform for building, deploying, and scaling web apps. With VNet integration, App Service can have secured and streamlined connectivity to Azure resources like databases, cache, or internal services. Private Endpoint: A specific object that allows a private connection between an Azure service and a network interface in a VNet. It serves as the bridge for this private connectivity, effectively making the service part of your VNet. Network Traffic Flow A p p S e r v i c e o u t b o u n d V N e t a s s o s i a t i o n P r i v a t e E n d p o i n t i n b o u n d C o n t a i n e r R e g i s t r y Outbound connectivity from App Service to VNET In Resource Group B, App Service uses integrated networking with VNET for outbound connectivity, allowing it to reach services inside the VNET. Inbound connectivity from VNET to Container Registry Then the VNet connects to a Private Endpoint which in turn links to the Container Registry in Resource Group A. This setup enables inbound connectivity, allowing App Service to access the Container Registry through the VNet. Private DNS Zone Resolution V N e t P r i v a t e L i n k C o n n e c t P r i v a t e D N S Z o n e C o n t a i n e r R e g i s t r y Moreover, the VNet is associated with a Private Link Connection to the Private DNS Zone. This ensures that the Container Registry is discoverable privately through DNS when accessed via the Private Endpoint. ","date":"2023-10-01","objectID":"/blog/azure/azure-private-endpoint/:2:0","tags":["Azure DNS","DNS","Private Endpoint","VNet","Virtual Network","Private Link","Private DNS Zone","Terraform","App Service"],"title":"Azure Private Endpoints for VNET Integrated Ingress","uri":"/blog/azure/azure-private-endpoint/"},{"categories":["Blog","Guides","Basics"],"content":"Terraform: Bringing It All Together Terraform is a popular Infrastructure as Code (IaC) tool that allows you to define and provision cloud infrastructure using a declarative configuration language. Let’s see how you can set up the above architecture using Terraform: ","date":"2023-10-01","objectID":"/blog/azure/azure-private-endpoint/:3:0","tags":["Azure DNS","DNS","Private Endpoint","VNet","Virtual Network","Private Link","Private DNS Zone","Terraform","App Service"],"title":"Azure Private Endpoints for VNET Integrated Ingress","uri":"/blog/azure/azure-private-endpoint/"},{"categories":["Blog","Guides","Basics"],"content":"Terraform Code for Private Endpoint: NOTE: Your private endpoint will be integrated with the private DNS zone, ie. ‘privatelink.azurewebsites.net’ in the resource group of the selected subnet. If the private DNS zone does not exist, it will be created automatically. resource \"azurerm_private_endpoint\" \"this\" { name = \"${var.prefix}PE${var.subnet_name}\" location = var.location resource_group_name = var.resource_group_name subnet_id = var.subnet_id private_service_connection { name = \"${var.prefix}PSC${var.subnet_name}\" private_connection_resource_id = var.target_resource_id subresource_names = [var.target_subresource_name] is_manual_connection = false } private_dns_zone_group { private_dns_zone_ids = [var.private_dns_zone_id] name = var.private_dns_zone_name } } ","date":"2023-10-01","objectID":"/blog/azure/azure-private-endpoint/:3:1","tags":["Azure DNS","DNS","Private Endpoint","VNet","Virtual Network","Private Link","Private DNS Zone","Terraform","App Service"],"title":"Azure Private Endpoints for VNET Integrated Ingress","uri":"/blog/azure/azure-private-endpoint/"},{"categories":["Blog","Guides","Basics"],"content":"Conclusion Azure’s Private Networking capabilities, especially with Private Endpoints, empower businesses to build secure, efficient, and resilient network topologies. It allows services to be exposed securely over private IPs, ensuring data doesn’t traverse over the internet. As businesses move towards a cloud-first approach, understanding and leveraging these features is crucial. Remember, while tools like Terraform make it easier to define and deploy such infrastructures, always ensure that you understand the underlying components and their interactions. Stay tuned for more deep dives into Azure’s myriad of offerings! ","date":"2023-10-01","objectID":"/blog/azure/azure-private-endpoint/:4:0","tags":["Azure DNS","DNS","Private Endpoint","VNet","Virtual Network","Private Link","Private DNS Zone","Terraform","App Service"],"title":"Azure Private Endpoints for VNET Integrated Ingress","uri":"/blog/azure/azure-private-endpoint/"},{"categories":["Guides"],"content":"This article shows the basic Markdown syntax and format.","date":"2021-12-18","objectID":"/blog/markdown/basics/","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files. Note This article is a shameful copy of the great Grav original page. Let’s face it: Writing content for the Web is tiresome. WYSIWYG editors help alleviate this task, but they generally result in horrible code, or worse yet, ugly web pages. Markdown is a better way to write HTML, without all the complexities and ugliness that usually accompanies it. Some of the key benefits are: Markdown is simple to learn, with minimal extra characters, so it’s also quicker to write content. Less chance of errors when writing in Markdown. Produces valid XHTML output. Keeps the content and the visual display separate, so you cannot mess up the look of your site. Write in any text editor or Markdown application you like. Markdown is a joy to use! John Gruber, the author of Markdown, puts it like this: The overriding design goal for Markdown’s formatting syntax is to make it as readable as possible. The idea is that a Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions. While Markdown’s syntax has been influenced by several existing text-to-HTML filters, the single biggest source of inspiration for Markdown’s syntax is the format of plain text email. – John Gruber Without further delay, let us go over the main elements of Markdown and what the resulting HTML looks like! Tip  Bookmark this page for easy future reference! ","date":"2021-12-18","objectID":"/blog/markdown/basics/:0:0","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Headings Headings from h2 through h6 are constructed with a # for each level: ## h2 Heading ### h3 Heading #### h4 Heading ##### h5 Heading ###### h6 Heading The HTML looks like this: \u003ch2\u003eh2 Heading\u003c/h2\u003e \u003ch3\u003eh3 Heading\u003c/h3\u003e \u003ch4\u003eh4 Heading\u003c/h4\u003e \u003ch5\u003eh5 Heading\u003c/h5\u003e \u003ch6\u003eh6 Heading\u003c/h6\u003e Heading IDs To add a custom heading ID, enclose the custom ID in curly braces on the same line as the heading: ### A Great Heading {#custom-id} The HTML looks like this: \u003ch3 id=\"custom-id\"\u003eA Great Heading\u003c/h3\u003e ","date":"2021-12-18","objectID":"/blog/markdown/basics/:1:0","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Comments Comments should be HTML compatible. \u003c!-- This is a comment --\u003e Comment below should NOT be seen: ","date":"2021-12-18","objectID":"/blog/markdown/basics/:2:0","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Horizontal Rules The HTML \u003chr\u003e element is for creating a “thematic break” between paragraph-level elements. In Markdown, you can create a \u003chr\u003e with any of the following: ___: three consecutive underscores ---: three consecutive dashes ***: three consecutive asterisks The rendered output looks like this: ","date":"2021-12-18","objectID":"/blog/markdown/basics/:3:0","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Body Copy Body copy written as normal, plain text will be wrapped with \u003cp\u003e\u003c/p\u003e tags in the rendered HTML. So this body copy: Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad. The HTML looks like this: \u003cp\u003eLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\u003c/p\u003e A line break can be done with one blank line. ","date":"2021-12-18","objectID":"/blog/markdown/basics/:4:0","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Inline HTML If you need a certain HTML tag (with a class) you can simply use HTML: Paragraph in Markdown. \u003cdiv class=\"class\"\u003e This is \u003cb\u003eHTML\u003c/b\u003e \u003c/div\u003e Paragraph in Markdown. ","date":"2021-12-18","objectID":"/blog/markdown/basics/:5:0","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Emphasis ","date":"2021-12-18","objectID":"/blog/markdown/basics/:6:0","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Bold For emphasizing a snippet of text with a heavier font-weight. The following snippet of text is rendered as bold text. **rendered as bold text** __rendered as bold text__ The HTML looks like this: \u003cstrong\u003erendered as bold text\u003c/strong\u003e ","date":"2021-12-18","objectID":"/blog/markdown/basics/:6:1","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Italics For emphasizing a snippet of text with italics. The following snippet of text is rendered as italicized text. *rendered as italicized text* _rendered as italicized text_ The HTML looks like this: \u003cem\u003erendered as italicized text\u003c/em\u003e ","date":"2021-12-18","objectID":"/blog/markdown/basics/:6:2","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Strikethrough In GFMGitHub flavored Markdown you can do strikethroughs. ~~Strike through this text.~~ The rendered output looks like this: Strike through this text. The HTML looks like this: \u003cdel\u003eStrike through this text.\u003c/del\u003e ","date":"2021-12-18","objectID":"/blog/markdown/basics/:6:3","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Combination Bold, italics, and strikethrough can be used in combination. ***bold and italics*** ~~**strikethrough and bold**~~ ~~*strikethrough and italics*~~ ~~***bold, italics and strikethrough***~~ The rendered output looks like this: bold and italics strikethrough and bold strikethrough and italics bold, italics and strikethrough The HTML looks like this: \u003cem\u003e\u003cstrong\u003ebold and italics\u003c/strong\u003e\u003c/em\u003e \u003cdel\u003e\u003cstrong\u003estrikethrough and bold\u003c/strong\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003estrikethrough and italics\u003c/em\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e\u003cstrong\u003ebold, italics and strikethrough\u003c/strong\u003e\u003c/em\u003e\u003c/del\u003e ","date":"2021-12-18","objectID":"/blog/markdown/basics/:6:4","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Blockquotes For quoting blocks of content from another source within your document. Add \u003e before any text you want to quote: \u003e **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. The rendered output looks like this: Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. The HTML looks like this: \u003cblockquote\u003e \u003cp\u003e \u003cstrong\u003eFusion Drive\u003c/strong\u003e combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. \u003c/p\u003e \u003c/blockquote\u003e Blockquotes can also be nested: \u003e Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. \u003e\u003e Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. The rendered output looks like this: Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. ","date":"2021-12-18","objectID":"/blog/markdown/basics/:7:0","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Lists ","date":"2021-12-18","objectID":"/blog/markdown/basics/:8:0","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Unordered A list of items in which the order of the items does not explicitly matter. You may use any of the following symbols to denote bullets for each list item: * valid bullet - valid bullet + valid bullet For example: * Lorem ipsum dolor sit amet * Consectetur adipiscing elit * Integer molestie lorem at massa * Facilisis in pretium nisl aliquet * Nulla volutpat aliquam velit * Phasellus iaculis neque * Purus sodales ultricies * Vestibulum laoreet porttitor sem * Ac tristique libero volutpat at * Faucibus porta lacus fringilla vel * Aenean sit amet erat nunc * Eget porttitor lorem The rendered output looks like this: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem The HTML looks like this: \u003cul\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit \u003cul\u003e \u003cli\u003ePhasellus iaculis neque\u003c/li\u003e \u003cli\u003ePurus sodales ultricies\u003c/li\u003e \u003cli\u003eVestibulum laoreet porttitor sem\u003c/li\u003e \u003cli\u003eAc tristique libero volutpat at\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ul\u003e ","date":"2021-12-18","objectID":"/blog/markdown/basics/:8:1","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Ordered A list of items in which the order of items does explicitly matter. 1. Lorem ipsum dolor sit amet 2. Consectetur adipiscing elit 3. Integer molestie lorem at massa 4. Facilisis in pretium nisl aliquet 5. Nulla volutpat aliquam velit 6. Faucibus porta lacus fringilla vel 7. Aenean sit amet erat nunc 8. Eget porttitor lorem The rendered output looks like this: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem The HTML looks like this: \u003col\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit\u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ol\u003e Tip If you just use 1. for each number, Markdown will automatically number each item. For example: 1. Lorem ipsum dolor sit amet 1. Consectetur adipiscing elit 1. Integer molestie lorem at massa 1. Facilisis in pretium nisl aliquet 1. Nulla volutpat aliquam velit 1. Faucibus porta lacus fringilla vel 1. Aenean sit amet erat nunc 1. Eget porttitor lorem The rendered output looks like this: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem ","date":"2021-12-18","objectID":"/blog/markdown/basics/:8:2","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Task Lists Task lists allow you to create a list of items with checkboxes. To create a task list, add dashes (-) and brackets with a space ([ ]) before task list items. To select a checkbox, add an x in between the brackets ([x]). - [x] Write the press release - [ ] Update the website - [ ] Contact the media The rendered output looks like this: Write the press release Update the website Contact the media ","date":"2021-12-18","objectID":"/blog/markdown/basics/:8:3","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Code ","date":"2021-12-18","objectID":"/blog/markdown/basics/:9:0","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Inline Code Wrap inline snippets of code with `. In this example, `\u003csection\u003e\u003c/section\u003e` should be wrapped as **code**. The rendered output looks like this: In this example, \u003csection\u003e\u003c/section\u003e should be wrapped as code. The HTML looks like this: \u003cp\u003e In this example, \u003ccode\u003e\u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;\u003c/code\u003e should be wrapped with \u003cstrong\u003ecode\u003c/strong\u003e. \u003c/p\u003e ","date":"2021-12-18","objectID":"/blog/markdown/basics/:9:1","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Indented Code Or indent several lines of code by at least four spaces, as in: // Some comments line 1 of code line 2 of code line 3 of code The rendered output looks like this: // Some comments line 1 of code line 2 of code line 3 of code The HTML looks like this: \u003cpre\u003e \u003ccode\u003e // Some comments line 1 of code line 2 of code line 3 of code \u003c/code\u003e \u003c/pre\u003e ","date":"2021-12-18","objectID":"/blog/markdown/basics/:9:2","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Block Fenced Code Use “fences” ``` to block in multiple lines of code with a language attribute. ```markdown Sample text here... ``` The HTML looks like this: \u003cpre language-html\u003e \u003ccode\u003eSample text here...\u003c/code\u003e \u003c/pre\u003e ","date":"2021-12-18","objectID":"/blog/markdown/basics/:9:3","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Syntax Highlighting List of Chroma Highlighting Languages - Hugo Chroma supported languages - Chroma GFMGitHub Flavored Markdown also supports syntax highlighting. To activate it, simply add the file extension of the language you want to use directly after the first code “fence”, ```js, and syntax highlighting will automatically be applied in the rendered HTML. For example, to apply syntax highlighting to JavaScript code: ```js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; ``` The rendered output looks like this: grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; Note Syntax highlighting page in Hugo Docs introduces more about syntax highlighting, including highlight shortcode. ","date":"2021-12-18","objectID":"/blog/markdown/basics/:9:4","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Tables Tables are created by adding pipes as dividers between each cell, and by adding a line of dashes (also separated by bars) beneath the header. Note that the pipes do not need to be vertically aligned. | Option | Description | | ------ | ----------- | | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | The rendered output looks like this: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. The HTML looks like this: \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eOption\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003edata\u003c/td\u003e \u003ctd\u003epath to data files to supply the data that will be passed into templates.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eengine\u003c/td\u003e \u003ctd\u003eengine to be used for processing templates. Handlebars is the default.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eext\u003c/td\u003e \u003ctd\u003eextension to be used for dest files.\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e Right or center aligned text Adding a colon on the right side of the dashes below any heading will right align text for that column. Adding colons on both sides of the dashes below any heading will center align text for that column. | Option | Description | |:------:| -----------:| | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | The rendered output looks like this: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. ","date":"2021-12-18","objectID":"/blog/markdown/basics/:10:0","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Links ","date":"2021-12-18","objectID":"/blog/markdown/basics/:11:0","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Basic Link \u003chttps://assemble.io\u003e \u003ccontact@revolunet.com\u003e [Assemble](https://assemble.io) The rendered output looks like this (hover over the link, there is no tooltip): https://assemble.io contact@revolunet.com Assemble The HTML looks like this: \u003ca href=\"https://assemble.io\"\u003ehttps://assemble.io\u003c/a\u003e \u003ca href=\"mailto:contact@revolunet.com\"\u003econtact@revolunet.com\u003c/a\u003e \u003ca href=\"https://assemble.io\"\u003eAssemble\u003c/a\u003e ","date":"2021-12-18","objectID":"/blog/markdown/basics/:11:1","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Add a Title [Upstage](https://github.com/upstage/ \"Visit Upstage!\") The rendered output looks like this (hover over the link, there should be a tooltip): Upstage The HTML looks like this: \u003ca href=\"https://github.com/upstage/\" title=\"Visit Upstage!\"\u003eUpstage\u003c/a\u003e ","date":"2021-12-18","objectID":"/blog/markdown/basics/:11:2","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Reference-style link Reference-style links are special links that make URLs easier to display and read in Markdown. Reference-style links are broken into two parts: a part kept inline with the text and a part stored elsewhere in the file to make the text easier to read. [text][id] ⋮ [id]: http://example.org/ \"title\" For example: [FixIt][fixit-repo] [fixit-repo]: https://github.com/hugo-fixit/FixIt \"A clean, elegant but advanced blog theme for Hugo\" The rendered output looks like this: FixIt ","date":"2021-12-18","objectID":"/blog/markdown/basics/:11:3","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Named Anchors Named anchors enable you to jump to the specified anchor point on the same page. For example, each of these chapters: ## Table of Contents * [Chapter 1](#chapter-1) * [Chapter 2](#chapter-2) * [Chapter 3](#chapter-3) will jump to these sections: ## Chapter 1 \u003ca id=\"chapter-1\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 2 \u003ca id=\"chapter-2\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 3 \u003ca id=\"chapter-3\"\u003e\u003c/a\u003e Content for chapter one. Note The specific placement of the anchor tag seems to be arbitrary. They are placed inline here since it seems to be unobtrusive, and it works. ","date":"2021-12-18","objectID":"/blog/markdown/basics/:11:4","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Footnotes Footnotes allow you to add notes and references without cluttering the body of the document. When you create a footnote, a superscript number with a link appears where you added the footnote reference. Readers can click the link to jump to the content of the footnote at the bottom of the page. To create a footnote reference, add a caret and an identifier inside brackets ([^1]). Identifiers can be numbers or words, but they can’t contain spaces or tabs. Identifiers only correlate the footnote reference with the footnote itself — in the output, footnotes are numbered sequentially. Add the footnote using another caret and number inside brackets with a colon and text ([^1]: My footnote.). You don’t have to put footnotes at the end of the document. You can put them anywhere except inside other elements like lists, block quotes, and tables. This is a digital footnote[^1]. This is a footnote with \"label\"[^label] [^1]: This is a digital footnote [^label]: This is a footnote with \"label\" This is a digital footnote1. This is a footnote with “label”2 ","date":"2021-12-18","objectID":"/blog/markdown/basics/:12:0","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Images Images have a similar syntax to links but include a preceding exclamation point. ![Minion](https://octodex.github.com/images/minion.png) or: ![Alt text](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\") Alt text Like links, images also have a reference-style syntax: ![Alt text][id] Alt text With a reference later in the document defining the URL location: [id]: https://octodex.github.com/images/dojocat.jpg \"The Dojocat\" Tip FixIt theme has special shortcode for image, which provides more features. This is a digital footnote ↩︎ This is a footnote with “label” ↩︎ ","date":"2021-12-18","objectID":"/blog/markdown/basics/:13:0","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":null,"content":" Once I was an blue collar factory worker, and boss came to me and shouted: Come January! Today you are programmer! This is how I become DevOps :D ","date":"2019-08-02","objectID":"/about/:0:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":" This documentation records some common questions and answers, mainly from GitHub Discussions. Why not support earlier versions of Hugo? Since the breadcrumb navigation related function was introduced in the Hugo release v0.109.0, this theme only supports Hugo versions not lower than 0.109.0. Why the Hugo extended edition is recommended? Since some features of this theme need to processes  SCSS to  CSS, it is recommended to use Hugo extended version for better experience. How to switch Hugo environments? Default environments are development with hugo server and production with hugo. Due to limitations in the local development environment, the comment system, CDN and fingerprint will not be enabled in the development environment. You could enable these features with hugo server -e production. How to choose search engine? The following is a comparison of two search engines: fuse: simple, no need to synchronize index.json, no limit for contentLength, high performance lunr: simple, no need to synchronize index.json, no limit for contentLength, but high bandwidth and low performance (Especially for Chinese which needs a large segmentit library) algolia: high performance and low bandwidth, but need to synchronize index.json and limit for contentLength The content of the post is separated by h2 and h3 HTML tag to improve query performance and basically implement full-text search. contentLength is used to limit the max index length of the part starting with h2 and h3 HTML tag. Question Question Didn’t find your questions? Join the discussions. ","date":"2019-08-02","objectID":"/faq/:0:0","tags":null,"title":"FAQ","uri":"/faq/"},{"categories":null,"content":"offline cache page","date":"0001-01-01","objectID":"/offline/","tags":null,"title":"","uri":"/offline/"}]