[{"categories":["Blog","Guides"],"content":"Azure DevOps: Understanding Compile-time, Queue-time, and Run-time Variables Azure DevOps stands as a formidable platform for continuous integration and continuous delivery (CI/CD). Its power is enriched by its versatile variable management system. This article will guide you through the maze of Azure DevOps variables, revealing the hidden quirks and behaviors across different scopes. ","date":"2022-10-01","objectID":"/blog/azure/2023-10-01-azure-devops-variables/:0:0","tags":["Azure","Azure DevOps","CI/CD","Pipelines","DevOps","Variables","Compile-time","Queue-time","Runtime"],"title":"Azure DevOps Pipeline Variable Types - Compile-time, Queue-time, and Run-time","uri":"/blog/azure/2023-10-01-azure-devops-variables/"},{"categories":["Blog","Guides"],"content":"Usecases This Post Will Answer: Ever been puzzled about how Azure DevOps Pipelines handle variables? Wondering how to leverage your pipeline with variable scopes? How can I trigger my pipeline template in for loop for each of targets from list? How do I disable certain targets from the Azure DevOps UI? Is it possible to use variable groups, or other centralised means, for rendering templates? How to mix compile-time, queue-time, and run-time variables and/or parameters? ","date":"2022-10-01","objectID":"/blog/azure/2023-10-01-azure-devops-variables/:1:0","tags":["Azure","Azure DevOps","CI/CD","Pipelines","DevOps","Variables","Compile-time","Queue-time","Runtime"],"title":"Azure DevOps Pipeline Variable Types - Compile-time, Queue-time, and Run-time","uri":"/blog/azure/2023-10-01-azure-devops-variables/"},{"categories":["Blog","Guides"],"content":"Understanding Variable Types Azure DevOps categorizes variables into three principal types: Compile-time Variables: Think of these as the constants in your code. Evaluated at pipeline compilation, they remain unaltered during the pipeline’s lifespan. Queue-time Variables: Set when the pipeline is queued and predominantly seen in the Azure DevOps UI. They come to the rescue when you need to override or supply values post compilation. Run-time Variables: The chameleons of the lot, they’re dynamic and spring to life during the pipeline’s execution. ","date":"2022-10-01","objectID":"/blog/azure/2023-10-01-azure-devops-variables/:2:0","tags":["Azure","Azure DevOps","CI/CD","Pipelines","DevOps","Variables","Compile-time","Queue-time","Runtime"],"title":"Azure DevOps Pipeline Variable Types - Compile-time, Queue-time, and Run-time","uri":"/blog/azure/2023-10-01-azure-devops-variables/"},{"categories":["Blog","Guides"],"content":"Code Snippets, Best Practices \u0026 Insights Coupling insights from provided code snippets and Azure DevOps’ documentation, let’s decode the art of using variables: ","date":"2022-10-01","objectID":"/blog/azure/2023-10-01-azure-devops-variables/:3:0","tags":["Azure","Azure DevOps","CI/CD","Pipelines","DevOps","Variables","Compile-time","Queue-time","Runtime"],"title":"Azure DevOps Pipeline Variable Types - Compile-time, Queue-time, and Run-time","uri":"/blog/azure/2023-10-01-azure-devops-variables/"},{"categories":["Blog","Guides"],"content":"1. Templates and Compile-time Templates thrive on compile-time parameters and static variables. Beware: passing dynamic run-time or UI-driven queue-time variables as compile-time parameters to nested templates is a no-go. variables: - name: variableHardcoded value: compileTime 1.1. Sourcing Files from other repos External files in Azure DevOps are your compile-time companions. Ideal for shared configurations or templates from single centralized place. resources: repositories: - repository: templates type: git name: 'MyProject/infrastructure-azure' ref: refs/heads/dev variables: - template: azure-pipelines/templates/vars.yml@templates # ! load at compile time where azure-pipelines/templates/vars.yml variables: - name: targetsDelimiter value: ';' - name: targetsList value: westeurope;southuk ## helper variables - name: targetsListUpper value: ${{ upper(variables.targetsList) }} - name: targetsListLower value: ${{ lower(variables.targetsList) }} ","date":"2022-10-01","objectID":"/blog/azure/2023-10-01-azure-devops-variables/:3:1","tags":["Azure","Azure DevOps","CI/CD","Pipelines","DevOps","Variables","Compile-time","Queue-time","Runtime"],"title":"Azure DevOps Pipeline Variable Types - Compile-time, Queue-time, and Run-time","uri":"/blog/azure/2023-10-01-azure-devops-variables/"},{"categories":["Blog","Guides"],"content":"2. Mixing Variable Types For conditions to work their magic, they need either queue-time or run-time variables. Using compile-time variables in conditions? Ensure they’re declared as variables upfront. stages: - template: templates/build-stage.yml - ${{ each target in split(variables.targetsList, variables.targetsListDelimiter) }}: - template: templates/deploy-stage.yml parameters: target: ${{ target }} 2.1. Conditions where file: templates/deploy-stage.yml parameters: - name: target displayName: AZURE TARGET REGION type: string default: '' stages: - stage: ShowVars${{ upper(parameters.target) }} dependsOn: variables: - name: target value: ${{ parameters.target }} condition: not(contains(variables.targetListDisabled, variables.target)) ","date":"2022-10-01","objectID":"/blog/azure/2023-10-01-azure-devops-variables/:3:2","tags":["Azure","Azure DevOps","CI/CD","Pipelines","DevOps","Variables","Compile-time","Queue-time","Runtime"],"title":"Azure DevOps Pipeline Variable Types - Compile-time, Queue-time, and Run-time","uri":"/blog/azure/2023-10-01-azure-devops-variables/"},{"categories":["Blog","Guides"],"content":"3. Azure DevOps Library Group Variables These are your run-time variable superstars. They dynamically enter the scene during the pipeline’s runtime. variables: - group: infrastructure_dev ","date":"2022-10-01","objectID":"/blog/azure/2023-10-01-azure-devops-variables/:3:3","tags":["Azure","Azure DevOps","CI/CD","Pipelines","DevOps","Variables","Compile-time","Queue-time","Runtime"],"title":"Azure DevOps Pipeline Variable Types - Compile-time, Queue-time, and Run-time","uri":"/blog/azure/2023-10-01-azure-devops-variables/"},{"categories":["Blog","Guides"],"content":"4. Least precedence of UI variables Variables in Azure DevOps UI are your queue-time warriors. However, any YAML or template-set variable can usurp the UI set variable. This safety net ensures accidental UI overrides don’t wreak havoc. Rule of thumb: Set them in one place for clarity. # - name: aqsTenantsListDisabled # ! has to be set in Azure DevOps Pipeline UI as yml take precedence ","date":"2022-10-01","objectID":"/blog/azure/2023-10-01-azure-devops-variables/:3:4","tags":["Azure","Azure DevOps","CI/CD","Pipelines","DevOps","Variables","Compile-time","Queue-time","Runtime"],"title":"Azure DevOps Pipeline Variable Types - Compile-time, Queue-time, and Run-time","uri":"/blog/azure/2023-10-01-azure-devops-variables/"},{"categories":["Blog","Guides"],"content":"Wrapping Up In the realm of Azure DevOps, mastering variables is akin to holding the keys to a treasure trove. By discerning between compile-time, queue-time, and run-time variables, you pave the way for streamlined and potent pipelines. As you journey forth, remember to always be mindful of your variable settings to guarantee a seamless CI/CD process. ","date":"2022-10-01","objectID":"/blog/azure/2023-10-01-azure-devops-variables/:4:0","tags":["Azure","Azure DevOps","CI/CD","Pipelines","DevOps","Variables","Compile-time","Queue-time","Runtime"],"title":"Azure DevOps Pipeline Variable Types - Compile-time, Queue-time, and Run-time","uri":"/blog/azure/2023-10-01-azure-devops-variables/"},{"categories":["Blog","Guides"],"content":"Securing Web Services with Azure DNS: Mastering the SSL ACME Challenge Secure web services are non-negotiable, and SSL/TLS certificates stand at the forefront of this security. While Let’s Encrypt offers these certificates, procuring them becomes a complex task if your server is shielded by a firewall that filters out incoming internet traffic. The culprit? Let’s Encrypt’s ACME challenge requests. Thankfully, Azure DNS comes to the rescue, providing a smooth path to your solution. ","date":"2022-10-01","objectID":"/blog/azure/2023-10-03-azure-dns-for-letsencrypt-acme-challenge/:1:0","tags":["Azure DNS","DNS","ACME","ACME Challenge","Let's Encrypt","DevOps","Certificate","SSL","TLS","Firewall"],"title":"Azure DNS as external resource for SSL ACME Challenge to bypass Ingress Firewalls","uri":"/blog/azure/2023-10-03-azure-dns-for-letsencrypt-acme-challenge/"},{"categories":["Blog","Guides"],"content":"The Power of Azure DNS Azure DNS isn’t just another tool in your arsenal; it’s a game-changer when you’re looking to obtain SSL/TLS certificates in environments riddled with restrictions. Our guide offers a comprehensive walkthrough, equipped with necessary scripts and configurations, ensuring you overcome these challenges effortlessly. ","date":"2022-10-01","objectID":"/blog/azure/2023-10-03-azure-dns-for-letsencrypt-acme-challenge/:1:1","tags":["Azure DNS","DNS","ACME","ACME Challenge","Let's Encrypt","DevOps","Certificate","SSL","TLS","Firewall"],"title":"Azure DNS as external resource for SSL ACME Challenge to bypass Ingress Firewalls","uri":"/blog/azure/2023-10-03-azure-dns-for-letsencrypt-acme-challenge/"},{"categories":["Blog","Guides"],"content":"A Peek into the Solution Understanding the underlying mechanism enhances implementation. Here’s a schematic representation of our strategy: C S A l e z D i r u N e v r S n e e t r A C M r E e q F C u i h e r a s e l t w l a e c l n e l g r e t i f i c a t e L e t ' s E n c r y p t [ g o a t ] ","date":"2022-10-01","objectID":"/blog/azure/2023-10-03-azure-dns-for-letsencrypt-acme-challenge/:1:2","tags":["Azure DNS","DNS","ACME","ACME Challenge","Let's Encrypt","DevOps","Certificate","SSL","TLS","Firewall"],"title":"Azure DNS as external resource for SSL ACME Challenge to bypass Ingress Firewalls","uri":"/blog/azure/2023-10-03-azure-dns-for-letsencrypt-acme-challenge/"},{"categories":["Blog","Guides"],"content":"Implementing the Solution To implement this solution, you’ll need two main scripts: one for setting up Azure DNS with the ACME challenge and another for configuring the SSL certificate with Terraform. 0. Prerequisites Tools: Azure CLI (az) acme.sh CLI (acme.sh) Azure resources: existing Azure Subscription -\u003e AZUREDNS_SUBSCRIPTIONID existing Azure App Registration -\u003e AZUREDNS_APPID existing Azure DNS -\u003e AZDNS_ZONE 1. Azure DNS with ACME Challenge Blueprint (azure-dns-acme.sh) NOTE: Code was cleaned up from anything beside critical parts: Azure RBAC acme.sh using Azure DNS # Assign \"DNS Zone Contributor\" role in Azure az role assignment create \\ --role \"DNS Zone Contributor\" \\ --assignee \"$AZUREDNS_APPID\" \\ --scope \"/subscriptions/$AZUREDNS_SUBSCRIPTIONID\" # ... # Issue certificate via acme.sh using Azure DNS acme.sh \\ --issue \\ --dns dns_azure \\ -d \"$AZDNS_ZONE\" ","date":"2022-10-01","objectID":"/blog/azure/2023-10-03-azure-dns-for-letsencrypt-acme-challenge/:1:3","tags":["Azure DNS","DNS","ACME","ACME Challenge","Let's Encrypt","DevOps","Certificate","SSL","TLS","Firewall"],"title":"Azure DNS as external resource for SSL ACME Challenge to bypass Ingress Firewalls","uri":"/blog/azure/2023-10-03-azure-dns-for-letsencrypt-acme-challenge/"},{"categories":["Blog","Guides"],"content":"Concluding Notes Azure DNS is your ally when conventional methods fall short. By integrating it, you not only ensure robust security with SSL/TLS certificates, even behind the most stringent firewalls, but also embrace an efficient and streamlined process. Stay updated, stay secure! ","date":"2022-10-01","objectID":"/blog/azure/2023-10-03-azure-dns-for-letsencrypt-acme-challenge/:1:4","tags":["Azure DNS","DNS","ACME","ACME Challenge","Let's Encrypt","DevOps","Certificate","SSL","TLS","Firewall"],"title":"Azure DNS as external resource for SSL ACME Challenge to bypass Ingress Firewalls","uri":"/blog/azure/2023-10-03-azure-dns-for-letsencrypt-acme-challenge/"},{"categories":["Guides"],"content":"This article shows the basic Markdown syntax and format.","date":"2021-12-18","objectID":"/blog/markdown/basics/","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files. Note This article is a shameful copy of the great Grav original page. Let’s face it: Writing content for the Web is tiresome. WYSIWYG editors help alleviate this task, but they generally result in horrible code, or worse yet, ugly web pages. Markdown is a better way to write HTML, without all the complexities and ugliness that usually accompanies it. Some of the key benefits are: Markdown is simple to learn, with minimal extra characters, so it’s also quicker to write content. Less chance of errors when writing in Markdown. Produces valid XHTML output. Keeps the content and the visual display separate, so you cannot mess up the look of your site. Write in any text editor or Markdown application you like. Markdown is a joy to use! John Gruber, the author of Markdown, puts it like this: The overriding design goal for Markdown’s formatting syntax is to make it as readable as possible. The idea is that a Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions. While Markdown’s syntax has been influenced by several existing text-to-HTML filters, the single biggest source of inspiration for Markdown’s syntax is the format of plain text email. – John Gruber Without further delay, let us go over the main elements of Markdown and what the resulting HTML looks like! Tip  Bookmark this page for easy future reference! ","date":"2021-12-18","objectID":"/blog/markdown/basics/:0:0","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Headings Headings from h2 through h6 are constructed with a # for each level: ## h2 Heading ### h3 Heading #### h4 Heading ##### h5 Heading ###### h6 Heading The HTML looks like this: \u003ch2\u003eh2 Heading\u003c/h2\u003e \u003ch3\u003eh3 Heading\u003c/h3\u003e \u003ch4\u003eh4 Heading\u003c/h4\u003e \u003ch5\u003eh5 Heading\u003c/h5\u003e \u003ch6\u003eh6 Heading\u003c/h6\u003e Heading IDs To add a custom heading ID, enclose the custom ID in curly braces on the same line as the heading: ### A Great Heading {#custom-id} The HTML looks like this: \u003ch3 id=\"custom-id\"\u003eA Great Heading\u003c/h3\u003e ","date":"2021-12-18","objectID":"/blog/markdown/basics/:1:0","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Comments Comments should be HTML compatible. \u003c!-- This is a comment --\u003e Comment below should NOT be seen: ","date":"2021-12-18","objectID":"/blog/markdown/basics/:2:0","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Horizontal Rules The HTML \u003chr\u003e element is for creating a “thematic break” between paragraph-level elements. In Markdown, you can create a \u003chr\u003e with any of the following: ___: three consecutive underscores ---: three consecutive dashes ***: three consecutive asterisks The rendered output looks like this: ","date":"2021-12-18","objectID":"/blog/markdown/basics/:3:0","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Body Copy Body copy written as normal, plain text will be wrapped with \u003cp\u003e\u003c/p\u003e tags in the rendered HTML. So this body copy: Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad. The HTML looks like this: \u003cp\u003eLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\u003c/p\u003e A line break can be done with one blank line. ","date":"2021-12-18","objectID":"/blog/markdown/basics/:4:0","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Inline HTML If you need a certain HTML tag (with a class) you can simply use HTML: Paragraph in Markdown. \u003cdiv class=\"class\"\u003e This is \u003cb\u003eHTML\u003c/b\u003e \u003c/div\u003e Paragraph in Markdown. ","date":"2021-12-18","objectID":"/blog/markdown/basics/:5:0","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Emphasis ","date":"2021-12-18","objectID":"/blog/markdown/basics/:6:0","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Bold For emphasizing a snippet of text with a heavier font-weight. The following snippet of text is rendered as bold text. **rendered as bold text** __rendered as bold text__ The HTML looks like this: \u003cstrong\u003erendered as bold text\u003c/strong\u003e ","date":"2021-12-18","objectID":"/blog/markdown/basics/:6:1","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Italics For emphasizing a snippet of text with italics. The following snippet of text is rendered as italicized text. *rendered as italicized text* _rendered as italicized text_ The HTML looks like this: \u003cem\u003erendered as italicized text\u003c/em\u003e ","date":"2021-12-18","objectID":"/blog/markdown/basics/:6:2","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Strikethrough In GFMGitHub flavored Markdown you can do strikethroughs. ~~Strike through this text.~~ The rendered output looks like this: Strike through this text. The HTML looks like this: \u003cdel\u003eStrike through this text.\u003c/del\u003e ","date":"2021-12-18","objectID":"/blog/markdown/basics/:6:3","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Combination Bold, italics, and strikethrough can be used in combination. ***bold and italics*** ~~**strikethrough and bold**~~ ~~*strikethrough and italics*~~ ~~***bold, italics and strikethrough***~~ The rendered output looks like this: bold and italics strikethrough and bold strikethrough and italics bold, italics and strikethrough The HTML looks like this: \u003cem\u003e\u003cstrong\u003ebold and italics\u003c/strong\u003e\u003c/em\u003e \u003cdel\u003e\u003cstrong\u003estrikethrough and bold\u003c/strong\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003estrikethrough and italics\u003c/em\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e\u003cstrong\u003ebold, italics and strikethrough\u003c/strong\u003e\u003c/em\u003e\u003c/del\u003e ","date":"2021-12-18","objectID":"/blog/markdown/basics/:6:4","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Blockquotes For quoting blocks of content from another source within your document. Add \u003e before any text you want to quote: \u003e **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. The rendered output looks like this: Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. The HTML looks like this: \u003cblockquote\u003e \u003cp\u003e \u003cstrong\u003eFusion Drive\u003c/strong\u003e combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. \u003c/p\u003e \u003c/blockquote\u003e Blockquotes can also be nested: \u003e Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. \u003e\u003e Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. The rendered output looks like this: Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. ","date":"2021-12-18","objectID":"/blog/markdown/basics/:7:0","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Lists ","date":"2021-12-18","objectID":"/blog/markdown/basics/:8:0","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Unordered A list of items in which the order of the items does not explicitly matter. You may use any of the following symbols to denote bullets for each list item: * valid bullet - valid bullet + valid bullet For example: * Lorem ipsum dolor sit amet * Consectetur adipiscing elit * Integer molestie lorem at massa * Facilisis in pretium nisl aliquet * Nulla volutpat aliquam velit * Phasellus iaculis neque * Purus sodales ultricies * Vestibulum laoreet porttitor sem * Ac tristique libero volutpat at * Faucibus porta lacus fringilla vel * Aenean sit amet erat nunc * Eget porttitor lorem The rendered output looks like this: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem The HTML looks like this: \u003cul\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit \u003cul\u003e \u003cli\u003ePhasellus iaculis neque\u003c/li\u003e \u003cli\u003ePurus sodales ultricies\u003c/li\u003e \u003cli\u003eVestibulum laoreet porttitor sem\u003c/li\u003e \u003cli\u003eAc tristique libero volutpat at\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ul\u003e ","date":"2021-12-18","objectID":"/blog/markdown/basics/:8:1","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Ordered A list of items in which the order of items does explicitly matter. 1. Lorem ipsum dolor sit amet 2. Consectetur adipiscing elit 3. Integer molestie lorem at massa 4. Facilisis in pretium nisl aliquet 5. Nulla volutpat aliquam velit 6. Faucibus porta lacus fringilla vel 7. Aenean sit amet erat nunc 8. Eget porttitor lorem The rendered output looks like this: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem The HTML looks like this: \u003col\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit\u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ol\u003e Tip If you just use 1. for each number, Markdown will automatically number each item. For example: 1. Lorem ipsum dolor sit amet 1. Consectetur adipiscing elit 1. Integer molestie lorem at massa 1. Facilisis in pretium nisl aliquet 1. Nulla volutpat aliquam velit 1. Faucibus porta lacus fringilla vel 1. Aenean sit amet erat nunc 1. Eget porttitor lorem The rendered output looks like this: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem ","date":"2021-12-18","objectID":"/blog/markdown/basics/:8:2","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Task Lists Task lists allow you to create a list of items with checkboxes. To create a task list, add dashes (-) and brackets with a space ([ ]) before task list items. To select a checkbox, add an x in between the brackets ([x]). - [x] Write the press release - [ ] Update the website - [ ] Contact the media The rendered output looks like this: Write the press release Update the website Contact the media ","date":"2021-12-18","objectID":"/blog/markdown/basics/:8:3","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Code ","date":"2021-12-18","objectID":"/blog/markdown/basics/:9:0","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Inline Code Wrap inline snippets of code with `. In this example, `\u003csection\u003e\u003c/section\u003e` should be wrapped as **code**. The rendered output looks like this: In this example, \u003csection\u003e\u003c/section\u003e should be wrapped as code. The HTML looks like this: \u003cp\u003e In this example, \u003ccode\u003e\u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;\u003c/code\u003e should be wrapped with \u003cstrong\u003ecode\u003c/strong\u003e. \u003c/p\u003e ","date":"2021-12-18","objectID":"/blog/markdown/basics/:9:1","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Indented Code Or indent several lines of code by at least four spaces, as in: // Some comments line 1 of code line 2 of code line 3 of code The rendered output looks like this: // Some comments line 1 of code line 2 of code line 3 of code The HTML looks like this: \u003cpre\u003e \u003ccode\u003e // Some comments line 1 of code line 2 of code line 3 of code \u003c/code\u003e \u003c/pre\u003e ","date":"2021-12-18","objectID":"/blog/markdown/basics/:9:2","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Block Fenced Code Use “fences” ``` to block in multiple lines of code with a language attribute. ```markdown Sample text here... ``` The HTML looks like this: \u003cpre language-html\u003e \u003ccode\u003eSample text here...\u003c/code\u003e \u003c/pre\u003e ","date":"2021-12-18","objectID":"/blog/markdown/basics/:9:3","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Syntax Highlighting List of Chroma Highlighting Languages - Hugo Chroma supported languages - Chroma GFMGitHub Flavored Markdown also supports syntax highlighting. To activate it, simply add the file extension of the language you want to use directly after the first code “fence”, ```js, and syntax highlighting will automatically be applied in the rendered HTML. For example, to apply syntax highlighting to JavaScript code: ```js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; ``` The rendered output looks like this: grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; Note Syntax highlighting page in Hugo Docs introduces more about syntax highlighting, including highlight shortcode. ","date":"2021-12-18","objectID":"/blog/markdown/basics/:9:4","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Tables Tables are created by adding pipes as dividers between each cell, and by adding a line of dashes (also separated by bars) beneath the header. Note that the pipes do not need to be vertically aligned. | Option | Description | | ------ | ----------- | | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | The rendered output looks like this: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. The HTML looks like this: \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eOption\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003edata\u003c/td\u003e \u003ctd\u003epath to data files to supply the data that will be passed into templates.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eengine\u003c/td\u003e \u003ctd\u003eengine to be used for processing templates. Handlebars is the default.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eext\u003c/td\u003e \u003ctd\u003eextension to be used for dest files.\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e Right or center aligned text Adding a colon on the right side of the dashes below any heading will right align text for that column. Adding colons on both sides of the dashes below any heading will center align text for that column. | Option | Description | |:------:| -----------:| | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | The rendered output looks like this: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. ","date":"2021-12-18","objectID":"/blog/markdown/basics/:10:0","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Links ","date":"2021-12-18","objectID":"/blog/markdown/basics/:11:0","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Basic Link \u003chttps://assemble.io\u003e \u003ccontact@revolunet.com\u003e [Assemble](https://assemble.io) The rendered output looks like this (hover over the link, there is no tooltip): https://assemble.io contact@revolunet.com Assemble The HTML looks like this: \u003ca href=\"https://assemble.io\"\u003ehttps://assemble.io\u003c/a\u003e \u003ca href=\"mailto:contact@revolunet.com\"\u003econtact@revolunet.com\u003c/a\u003e \u003ca href=\"https://assemble.io\"\u003eAssemble\u003c/a\u003e ","date":"2021-12-18","objectID":"/blog/markdown/basics/:11:1","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Add a Title [Upstage](https://github.com/upstage/ \"Visit Upstage!\") The rendered output looks like this (hover over the link, there should be a tooltip): Upstage The HTML looks like this: \u003ca href=\"https://github.com/upstage/\" title=\"Visit Upstage!\"\u003eUpstage\u003c/a\u003e ","date":"2021-12-18","objectID":"/blog/markdown/basics/:11:2","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Reference-style link Reference-style links are special links that make URLs easier to display and read in Markdown. Reference-style links are broken into two parts: a part kept inline with the text and a part stored elsewhere in the file to make the text easier to read. [text][id] ⋮ [id]: http://example.org/ \"title\" For example: [FixIt][fixit-repo] [fixit-repo]: https://github.com/hugo-fixit/FixIt \"A clean, elegant but advanced blog theme for Hugo\" The rendered output looks like this: FixIt ","date":"2021-12-18","objectID":"/blog/markdown/basics/:11:3","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Named Anchors Named anchors enable you to jump to the specified anchor point on the same page. For example, each of these chapters: ## Table of Contents * [Chapter 1](#chapter-1) * [Chapter 2](#chapter-2) * [Chapter 3](#chapter-3) will jump to these sections: ## Chapter 1 \u003ca id=\"chapter-1\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 2 \u003ca id=\"chapter-2\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 3 \u003ca id=\"chapter-3\"\u003e\u003c/a\u003e Content for chapter one. Note The specific placement of the anchor tag seems to be arbitrary. They are placed inline here since it seems to be unobtrusive, and it works. ","date":"2021-12-18","objectID":"/blog/markdown/basics/:11:4","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Footnotes Footnotes allow you to add notes and references without cluttering the body of the document. When you create a footnote, a superscript number with a link appears where you added the footnote reference. Readers can click the link to jump to the content of the footnote at the bottom of the page. To create a footnote reference, add a caret and an identifier inside brackets ([^1]). Identifiers can be numbers or words, but they can’t contain spaces or tabs. Identifiers only correlate the footnote reference with the footnote itself — in the output, footnotes are numbered sequentially. Add the footnote using another caret and number inside brackets with a colon and text ([^1]: My footnote.). You don’t have to put footnotes at the end of the document. You can put them anywhere except inside other elements like lists, block quotes, and tables. This is a digital footnote[^1]. This is a footnote with \"label\"[^label] [^1]: This is a digital footnote [^label]: This is a footnote with \"label\" This is a digital footnote1. This is a footnote with “label”2 ","date":"2021-12-18","objectID":"/blog/markdown/basics/:12:0","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":["Guides"],"content":"Images Images have a similar syntax to links but include a preceding exclamation point. ![Minion](https://octodex.github.com/images/minion.png) or: ![Alt text](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\") Alt text Like links, images also have a reference-style syntax: ![Alt text][id] Alt text With a reference later in the document defining the URL location: [id]: https://octodex.github.com/images/dojocat.jpg \"The Dojocat\" Tip FixIt theme has special shortcode for image, which provides more features. This is a digital footnote ↩︎ This is a footnote with “label” ↩︎ ","date":"2021-12-18","objectID":"/blog/markdown/basics/:13:0","tags":["Markdown","Content","HTML","Basics"],"title":"Basic Markdown Syntax","uri":"/blog/markdown/basics/"},{"categories":null,"content":" Once I was an blue collar factory worker, and boss came to me and shouted: Come January! Today you are programmer! This is how I become DevOps :D ","date":"2019-08-02","objectID":"/about/:0:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":" This documentation records some common questions and answers, mainly from GitHub Discussions. Why not support earlier versions of Hugo? Since the breadcrumb navigation related function was introduced in the Hugo release v0.109.0, this theme only supports Hugo versions not lower than 0.109.0. Why the Hugo extended edition is recommended? Since some features of this theme need to processes  SCSS to  CSS, it is recommended to use Hugo extended version for better experience. How to switch Hugo environments? Default environments are development with hugo server and production with hugo. Due to limitations in the local development environment, the comment system, CDN and fingerprint will not be enabled in the development environment. You could enable these features with hugo server -e production. How to choose search engine? The following is a comparison of two search engines: fuse: simple, no need to synchronize index.json, no limit for contentLength, high performance lunr: simple, no need to synchronize index.json, no limit for contentLength, but high bandwidth and low performance (Especially for Chinese which needs a large segmentit library) algolia: high performance and low bandwidth, but need to synchronize index.json and limit for contentLength The content of the post is separated by h2 and h3 HTML tag to improve query performance and basically implement full-text search. contentLength is used to limit the max index length of the part starting with h2 and h3 HTML tag. Question Question Didn’t find your questions? Join the discussions. ","date":"2019-08-02","objectID":"/faq/:0:0","tags":null,"title":"FAQ","uri":"/faq/"},{"categories":null,"content":"offline cache page","date":"0001-01-01","objectID":"/offline/","tags":null,"title":"","uri":"/offline/"}]